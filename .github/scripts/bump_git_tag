#!/bin/bash

# This script gets the latest git tag merged into the default branch,
# bumps the patch version based on what you have in the `.version` file,
# and pushes the new tag to the remote repository.
#
# Usage: bump_git_tag <default_branch_name>
# Example: bump_git_tag origin/main
#
# If the latest tag is `0.1.0` and the `.version` file contains `0.1`, the new tag will be `0.1.1`.
# If the latest tag is `0.1.0` and the `.version` file contains `1.0`, the new tag will be `1.0.0`.
# If the latest tag is `0.2.0` and the `.version` file contains `0.1`, the new tag will be `0.1.0`,
# because the version in the `.version` file is the source of truth.
#
# This means that the developer should only care about the major and minor versions in the `.version` file,
# and the rest will be done automatically by this script.

set -e

# Enable tracing mode if RUNNER_DEBUG is set to 1,
# so the script prints each command before executing it.
if [[ "$RUNNER_DEBUG" == "1" ]]; then
  set -x
fi

get_latest_git_tag() {
    local default_branch="$1"
    # Get the latest tag merged into the default branch
    # suppress errors if no tags are found
    git tag --sort=-creatordate --merged ${default_branch} | head -n 1 || true
}

bump_version() {
    local latest_git_tag="$1"
    version_file=".version"
    version=$(cat ${version_file})

    parts=(${latest_git_tag//\./ })
    major=${parts[0]}
    minor=${parts[1]}
    patch=${parts[2]}

    if [ "${major}.${minor}" == "$version" ]; then
      patch=$(($patch+1))
    else
      parts=(${version//\./ })
      major=${parts[0]}
      minor=${parts[1]}
      patch=0
    fi

    echo "${major}.${minor}.${patch}"
}

push_git_tag() {
    local tag="$1"
    git tag "$tag"
    git push origin "$tag"
}

# Main script
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <default_branch_name>"
    exit 1
fi

git config --global --add safe.directory /github/workspace
git fetch --unshallow --tags 2>/dev/null || true

branch_name="$1"

latest_tag=$(get_latest_git_tag "$branch_name")
new_version=$(bump_version "$latest_tag")
push_git_tag "$new_version"

set +x