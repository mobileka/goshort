name: Build the project

on: push

env:
  CONTAINER_REGISTRY: registry.gitlab.com # ghcr.io
  CR_USER: ${{ secrets.GITLAB_USERNAME }} # ${{ github.actor }}
  CR_PASSWORD: ${{ secrets.GLCR_TOKEN }} # ${{ secrets.GHCR_TOKEN }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Go version consistency
        run: ./.github/scripts/check_go_version_consistency

  build:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Run tests
        run: go test -v ./...

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      # id-token: write
      # attestations: write

    needs: [build]
    # if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

    steps:
      - uses: actions/checkout@v4

      - name: Get the latest tag pushed to the default branch
        id: latest_tag
        run: |
          TAG=$(./.github/scripts/get_latest_tag "origin/${{ github.event.repository.default_branch }}")
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Bump the version according to SemVer and the .version file
        id: bump_version
        run: |
          VERSION=$(./.github/scripts/bump_version ${{ steps.latest_tag.outputs.tag }})
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to the Container Registry
        id: docker_login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ env.CR_USER }}
          password: ${{ env.CR_PASSWORD }}

# TODO: Add metadata extraction
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}

# TODO: Add the tags and the labels from metadata extraction
# ${{ steps.meta.outputs.tags }}
# labels: ${{ steps.meta.outputs.labels }}
      - name: Build and push the Docker image
        id: docker_build_and_push
        if: steps.docker_login.outcome == 'success'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: | 
            ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.bump_version.outputs.version }}
            ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

# TODO: Add the attestation
#
#      - name: Install Cosign
#        uses: sigstore/cosign-installer@v3
#
#      - name: Generate and upload attestation to Rekor
#        uses: sigstore/cosign-attest@v3
#        with:
#          image: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
#          predicate: provenance
#          oidc-provider: github
# OR:
#      - name: Generate artifact attestation
#        uses: actions/attest-build-provenance@v2
#        with:
#          subject-name: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME}}
#          subject-digest: ${{ steps.docker_build_and_push.outputs.digest }}
#          push-to-registry: true

      - name: Push the new tag to GitHub
        if: steps.docker_build_and_push.outcome == 'success'
        run: ./.github/scripts/push_tag ${{ steps.bump_version.outputs.version }}
