name: Build the project

on: push

env:
  CONTAINER_REGISTRY: ghcr.io
  CR_USER: ${{ github.actor }}
  CR_PASS: ${{ secrets.GHCR_TOKEN }}
  IMAGE_NAME: ${{ github.repository }}
  CI_ENV: "gha"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Go version consistency
        run: ./scripts/ci/check_go_version_consistency

  build:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Run tests
        run: ./scripts/ci/run_tests

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    needs: [build]
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

    steps:
      - uses: actions/checkout@v4

      - name: Get the latest tag pushed to the default branch
        id: latest_tag
        run: |
          TAG=$(./scripts/ci/get_latest_tag "origin/${{ github.event.repository.default_branch }}")
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Bump the version according to SemVer and the .version file
        id: bump_version
        run: |
          VERSION=$(./scripts/ci/bump_version ${{ steps.latest_tag.outputs.tag }})
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to the Container Registry
        id: docker_login
        run: ./scripts/ci/docker_login

# TODO: Add metadata extraction
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}

# TODO: Add the tags and the labels from metadata extraction
# ${{ steps.meta.outputs.tags }}
# labels: ${{ steps.meta.outputs.labels }}
      - name: Build and push the Docker image
        id: docker_build_and_push
        if: steps.docker_login.outcome == 'success'
        run: |
          DIGEST=./scripts/ci/docker_build_and_push \
          ${{ steps.bump_version.outputs.version }} \
          ${{ github.sha }}
          
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.docker_build_and_push.outputs.digest }}
          push-to-registry: true

      - name: Push the new version as a new tag
        run: | 
          ./scripts/ci/push_tag \
          ${{ github.event.repository.default_branch }} \
          ${{ steps.bump_version.outputs.version }}
